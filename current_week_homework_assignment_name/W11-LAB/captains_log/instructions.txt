# The Captain's Log

If you finish lab early consider:
  - adding some CSS and practice styling your app
  - try working with the date object! Try to make it look human readable in HTML. It's tricky! [A Hint](https://momentjs.com/)
  - try working through the next section of the lab before it is covered in lecture - see what you can figure out
  - **SUPER BONUS** - Once you finish this whole lab, add a second model for comments, it should have the name of the person who wrote it, and some text for the comment (maybe time stamps?). This model should 'belong' to the post, the data should be related in some way. Do your own research of how to set up a `one-to-many` relationship (one post can have many comments, one comment only belongs to one post), in MongoDB. Use Mongo Documents, Google, or [Matt's Notes](../instructor_notes/multiple_models) - note we will not have class time to teach a second, related model.



### Show Route
 - bonus:
  - if you had added time stamps to your model, display the date the entry was created



### Delete Route
1. don't forget to `git add` and `git commit` your work, give yourself an informative commit message so you can trace back your work, if you need to

### Edit Route
1. Fill out your RESTful table
1. in your `index.ejs`, add a link to your edit route
1. create your edit route in your `server.js`
1. create your `edit.ejs`
1. test it to make sure it works as expected (be sure to populate your form with your log's data)
1. don't forget to `git add` and `git commit` your work, give yourself an informative commit message so you can trace back your work, if you need to

### Put Route
1. Fill out your Restful table
1. upgrade your` edit.ejs` form to have the appropriate action and method
1. create your PUT route
1. First, just have it `res.send` the updated log and check it is as expected
1. change the `res.send` to a `res.redirect` to your index page
1. don't forget to `git add` and `git commit` your work, give yourself an informative commit message so you can trace back your work, if you need to

>**Note:** This is the end of day 2 work. Everything below will not be covered until the next class session. Please take some time to clean up CSS and any other work for the above sections before moving on to the next sections.

### Router
1. `mkdir controllers`
1. `touch controllers/logs.js`
1. work on refactoring your code so your logs routes are in your controller file, rather than in `server.js`

### Bonuses
1. The captain wants to keep track of eating habits: make a new set of routes in a new file in your controller folder called foodlogs
  1. build out the 7 restful routes for foodlogs, include a new model with whatever properties make sense
1. make a seed file and seed it
1. have your update route redirect to the show page of the log that was edited
1. research `res.redirect('back')`
1. create a seed file and seed your database
1. work on your css, make this Captain's Log look awesome!
1. if you have timestamps, figure out how to edit/display the edited date
1. research ejs partials and implement them